replicaCount: 1

image:
    repository: "inquerydata/inquery-trino-gateway"
    pullPolicy: IfNotPresent
    # Override the image tag whose default is the chart appVersion.
    tag: "latest"

    # For local testing
    #repository: "trino-gateway"
    pullPolicy: Always
    #tag: "8-SNAPSHOT"

inqueryPredictor:
    image:
        repository: "inquerydata/inquery-predictor:latest"
        pullPolicy: Always
    port: 5001


imagePullSecrets:
    - name: regcred

# Provide configuration for the Trino Gateway dataStore in dataStoreSecret. This node can
# be left undefined if dataStore is defined under the config node. For production deployments
# sensitive values should be stored in a Secret
dataStoreSecret:
    name: ""
    key: ""

# Provide configuration for the Trino Gateway backendState in backendStateSecret. This should
# be used with health check configurations that require backend credentials. This node can
# be left undefined if dataStore is defined under the config node.
backendStateSecret:
    name: ""
    key: ""

# Provide configuration for the Trino Gateway authentication configuration in authenticationSecret.
# This node can be left undefined if dataStore is defined under the config node.
authenticationSecret:
    name: ""
    key: ""

config:
    logging:
        type: "external"
    requestRouter:
        #SQL clients connect to the request port
        port: 9080
        name: testTrinoRouter
        historySize: 1000
    server:
        applicationConnectors:
            - type: http
              port: 9081
              useForwardedHeaders: true
        adminConnectors:
            - type: http
              port: 9082
              useForwardedHeaders: true
    modules:
        - io.trino.gateway.ha.module.HaGatewayProviderModule
        - io.trino.gateway.ha.module.ClusterStateListenerModule
        - io.trino.gateway.ha.module.ClusterStatsMonitorModule
    managedApps:
        - io.trino.gateway.ha.GatewayManagedApp
        - io.trino.gateway.ha.clustermonitor.ActiveClusterMonitor
    routingRules:
        rulesEngineEnabled: True
        rulesConfigPath: "/etc/routing-rules/routing-rules.yaml"
    dataStore:
        jdbcUrl:
        user:
        password:
        driver:
    clusterStatsConfiguration:
        monitorType: INFO_API
service:
  type: ClusterIP
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: trino-gateway.local
      paths:
        - path: /
          pathType: ImplementationSpecific

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
 limits:
   cpu: 500m
   memory: 512Mi
 requests:
   cpu: 250m
   memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  failureThreshold: 3
  timeoutSeconds: 1
  scheme: HTTP

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 12
  timeoutSeconds: 1
  scheme: HTTP

volumes:
    - name: routing-rules
      configMap:
          name: routing-rules
          items:
              - key: routing-rules.yaml
                path: routing-rules.yaml

volumeMounts:
    - name: routing-rules
      mountPath: "/etc/routing-rules/routing-rules.yaml"
      subPath: routing-rules.yaml


nodeSelector: {}

tolerations: []

affinity: {}

podAnnotations: {}

podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
